name: PR-FRONTMATTER-CHECK

# トリガー: PRが作成・更新された時
on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

# Github Runnerのシェル
defaults:
  run:
    shell: bash

jobs:
  # FrontMatterチェックジョブ
  frontmatter-check:
    runs-on: ubuntu-latest
    
    steps:
      # PRのブランチの内容をチェックアウト
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      # 記事の必須要件をチェック
      - name: Front Matter check
        run: |
          er_cnt=0
          echo "::notice::FrontMatterチェックを開始します"
          
          # Authorタグのチェック
          # 対象は、_index.md以外
          echo "::group::Authorタグのチェック"
          for file in $(find ./content/ -name '*.md' | sed -e "/_index.md/d"); do
            tag_author=$(cat $file | sed -ne "/tags \= \[/p" | sed -ne "/Author:/p")
            if [ -z "$tag_author" ]; then
              echo "::error file=$file::Authorタグが見つかりません"
              er_cnt=$(expr $er_cnt + 1)
            else
              echo "::notice file=$file::Authorタグ: OK"
            fi
          done
          echo "::endgroup::"
          
          # Levelタグのチェック
          # 対象は、_index.md以外、Generalフォルダ以外、Otherフォルダ以外、tutorialフォルダ以外、projectsフォルダ以外
          echo "::group::Levelタグのチェック"
          for file in $(find ./content/ -name '*.md' | sed -e "/_index.md/d" | sed -e "/content\/general/d" | sed -e "/content\/other/d" | sed -e "/content\/tutorial/d" | sed -e "/content\/projects/d" ); do
            tag_level=$(cat $file | sed -ne "/tags \= \[/p" | sed -ne "/Level:/p")
            if [ -z "$tag_level" ]; then
              echo "::error file=$file::Levelタグが見つかりません"
              er_cnt=$(expr $er_cnt + 1)
            else
              echo "::notice file=$file::Levelタグ: OK"
            fi
          done
          echo "::endgroup::"
          
          # Typeタグのチェック
          # 対象は、_index.md以外、Generalフォルダ以外、tutorialフォルダ以外
          echo "::group::Typeタグのチェック"
          for file in $(find ./content/ -name '*.md' | sed -e "/_index.md/d" | sed -e "/content\/general/d" | sed -e "/content\/tutorial/d"); do
            tag_type=$(cat $file | sed -ne "/tags \= \[/p" | sed -ne "/Type:/p")
            if [ -z "$tag_type" ]; then
              echo "::error file=$file::Typeタグが見つかりません"
              er_cnt=$(expr $er_cnt + 1)
            else
              echo "::notice file=$file::Typeタグ: OK"
            fi
          done
          echo "::endgroup::"
          
          # チェック結果の表示
          if [ $er_cnt -eq 0 ]; then
            echo "::notice::✅ すべてのFrontMatterチェックが成功しました"
            exit 0
          else
            echo "::error::❌ $er_cnt 個のエラーが見つかりました。上記のエラーを修正してください。"
            exit 1
          fi

      # チェック結果をPRにコメント
      - name: Comment PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha,
              check_name: 'frontmatter-check'
            });
            
            const success = '${{ job.status }}' === 'success';
            const body = success 
              ? '✅ **FrontMatterチェック: 成功**\n\nすべての必須タグが正しく設定されています。'
              : '❌ **FrontMatterチェック: 失敗**\n\n一部のMarkdownファイルで必須タグが不足しています。詳細は上記のエラーログを確認してください。\n\n**必須タグ:**\n- `Author:` - すべてのコンテンツファイル\n- `Level:` - server, network, cloudカテゴリのファイル\n- `Type:` - general, tutorial以外のファイル';
            
            // 既存のコメントを検索
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('FrontMatterチェック')
            );
            
            if (botComment) {
              // 既存のコメントを更新
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // 新しいコメントを作成
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: body
              });
            }