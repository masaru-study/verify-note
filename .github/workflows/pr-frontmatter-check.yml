name: PR-FRONTMATTER-CHECK

# トリガー: PRが作成・更新された時
on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

# PRの操作やコメントを記述するためのGITHUB_TOKEN権限
permissions:
  contents: read
  pull-requests: write
  issues: write

# Github Runnerのシェル
defaults:
  run:
    shell: bash

jobs:
  # FrontMatterチェックジョブ
  frontmatter-check:
    runs-on: ubuntu-latest

    steps:
      # PRのブランチの内容をチェックアウト
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      # 記事の必須要件をチェック
      - name: Front Matter check
        id: check
        continue-on-error: true
        run: |
          error_files=""
          echo "::notice::FrontMatterチェックを開始します"

          # Authorタグのチェック
          # 対象は、_index.md以外
          echo "::group::Authorタグのチェック"
          for file in $(find ./content/ -name '*.md' | sed -e "/_index.md/d"); do
            tag_author=$(cat $file | sed -ne "/tags \= \[/p" | sed -ne "/Author:/p")
            if [ -z "$tag_author" ]; then
              echo "::error file=$file::Authorタグが見つかりません"
              error_files="$error_files\n- ❌ **$file**: Authorタグが不足"
            else
              echo "::notice file=$file::Authorタグ: OK"
            fi
          done
          echo "::endgroup::"

          # Levelタグのチェック
          # 対象は、_index.md以外、Generalフォルダ以外、Otherフォルダ以外、tutorialフォルダ以外、projectsフォルダ以外
          echo "::group::Levelタグのチェック"
          for file in $(find ./content/ -name '*.md' | sed -e "/_index.md/d" | sed -e "/content\/general/d" | sed -e "/content\/other/d" | sed -e "/content\/tutorial/d" | sed -e "/content\/projects/d" ); do
            tag_level=$(cat $file | sed -ne "/tags \= \[/p" | sed -ne "/Level:/p")
            if [ -z "$tag_level" ]; then
              echo "::error file=$file::Levelタグが見つかりません"
              error_files="$error_files\n- ❌ **$file**: Levelタグが不足"
            else
              echo "::notice file=$file::Levelタグ: OK"
            fi
          done
          echo "::endgroup::"

          # Typeタグのチェック
          # 対象は、_index.md以外、Generalフォルダ以外、tutorialフォルダ以外
          echo "::group::Typeタグのチェック"
          for file in $(find ./content/ -name '*.md' | sed -e "/_index.md/d" | sed -e "/content\/general/d" | sed -e "/content\/tutorial/d"); do
            tag_type=$(cat $file | sed -ne "/tags \= \[/p" | sed -ne "/Type:/p")
            if [ -z "$tag_type" ]; then
              echo "::error file=$file::Typeタグが見つかりません"
              error_files="$error_files\n- ❌ **$file**: Typeタグが不足"
            else
              echo "::notice file=$file::Typeタグ: OK"
            fi
          done
          echo "::endgroup::"

          # チェック結果の表示
          if [ -z ${error_files} ]; then
            echo "::notice::✅ すべてのFrontMatterチェックが成功しました"
            exit 0
          else
            echo "::error::❌ エラーが見つかりました。このPRはマージできません。"
            echo "::error::問題のあるファイル一覧:"
            echo -e "$error_files"
            {
              echo 'error_files<<EOF'
              echo -e "$error_files"
              echo 'EOF'
            } >> "$GITHUB_OUTPUT"
            exit 1
          fi

      # FrontMatterチェックが成功した場合、PRにコメント
      - name: PR Comment on Success
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMENT_BODY=$(cat << "EOF"
          ✅ **FrontMatterチェック: 成功**

          すべての必須タグが正しく設定されています。このPRはマージ可能です。
          EOF
          echo "$COMMENT_BODY" | gh pr comment ${{ github.event.pull_request.number }} --body-file=-

      # FrontMatterチェックが失敗した場合、PRにコメント
      - name: PR Comment on Failure
        if: failure()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMENT_BODY=$(cat << "EOF"
          ❌ **FrontMatterチェック: 失敗**
          ⚠️ このPRは現在マージできません。以下の問題を修正してください：

          ### 🔧 修正が必要なファイル
          ${{ steps.check.outputs.error_files }}

          ### 📋 必須タグの説明
          - **Author:** すべてのコンテンツファイルに必要
          - **Level:** server, network, cloudカテゴリのファイルに必要
          - **Type:** general, tutorial以外のファイルに必要

          ### 💡 修正例
          ```toml
          tags = [\"Author:あなたの名前\", \"Level:初級\", \"Type:Knowledge\"]
          ```

          ### 🔧 修正後の対応
          1. 上記のエラーをすべて修正してください
          2. 修正完了後、新しいPRを作成してください
          3. または、このPRを再オープンして修正をpushしてください

          🚫 **PR自動クローズします。**
          EOF
          echo "$COMMENT_BODY" | gh pr comment ${{ github.event.pull_request.number }} --body-file=-
          gh pr close ${{ github.event.pull_request.number }}
